I"∆<hr />

<h2 id="table-of-content"><strong>Table of Content</strong></h2>
<hr />

<p>This post is a part of series about deep learning algorithms. <a href="/topic/aidl">Visit this link</a>, to explore other related topics/concepts. Today, we are going to discuss logistic regression in context of a simple neural network. But first, we need to clear some basic concepts and terminologies. First of all, lets discuss the mechanism that a machine use to store or represent images (this will help us in better understanding our concepts).</p>

<h2 id="representation-of-images-in-machine">Representation of images in machine</h2>
<p>Data in computers is stored and transmitted as a series of ones and zeros (also known as Binary). To store an image on a computer, the image is broken down into tiny elements called pixels. A pixel (short for picture element) represents one color. An image with a resolution of 1024 by 798 pixels has 1024 x 798 pixels (817,152 pixels). In order for the computer to store the image, each pixel is represented by a binary value. We call this representation of colors a ‚Äúbit-plane‚Äù. Each bit doubles the number of available colors i.e. 1-bit would give us 2 colors, 2-bits would give us 4 colors and 3-bits would give us 8 colors etc. In a monochrome (two color) image, like the example below, just 1 bit is needed to represent each pixel e.g. 0 for white and 1 for black.</p>

<p><img src="/assets/aidl/Module_02/monochromic-image.png" alt="Monochromic Image" /></p>

<p>Images are stored in scan lines. Each line is encoded from left to right, top to bottom. The image here would receive the following binary values:</p>

<p><img src="/assets/aidl/Module_02/monochromic-image-binary.png" alt="monochromic binary image" /></p>

<p>In an image that uses 4 colors, 2 bits are needed for each pixel. The following example uses two bits to store the following colors:</p>

<p>00 ‚Äì White; 01 ‚Äì Black; 10 ‚Äì Yellow; 11 ‚Äì Blue</p>

<p><img src="/assets/aidl/Module_02/4-color-picture.png" alt="4-color picture" />
The image here would receive the following binary values:</p>

<p><img src="/assets/aidl/Module_02/4-color-picture-binary.png" alt="4-color picture binary" /></p>

<p>In order for the computer to interpret the image, the computer needs to know the following:</p>

<ul>
  <li>Color depth ‚Äì how many bits represent each pixel</li>
  <li>Resolution - Width &amp; Height (in pixels)</li>
</ul>

<p>We call this extra piece of information ‚Äúmetadata‚Äù.</p>

<h2 id="binary-classification">Binary Classification</h2>
<p>Binary classification is the simplest kind of machine learning problem. The goal of binary classification is to categories data points into one of two buckets: 0 or 1, true or false, to survive or not to survive, blue or no blue eyes, etc.</p>

<p>Following are two examples of binary classification:</p>
<ul>
  <li><strong>Surviving the Titanic if you were a passenger:</strong> either you have survived or not survived the sinking of the Titanic (assuming you were on the Titanic).</li>
  <li><strong>Flight delays - admittedly, flight delays would qualify as a regression problem:</strong> there are no finitely many buckets you want to categorize some flight delay into. In this scenario, however, I have transformed the regression problem into a classification problem, since I only want to know if a flight will have a delay of more than 15 minutes or less.</li>
</ul>

<h2 id="references">References</h2>
<ul>
  <li><a href="https://oliviaklose.azurewebsites.net/machine-learning-6-binary-classification/">Discussion: Classification and its applications</a></li>
  <li><a href="https://teachwithict.weebly.com/binary-representation-of-images.html">Graphical representation of figures in machines</a></li>
</ul>
:ET